{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a829a789-7530-4d3e-ac57-c78f066d7c79",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7633248-79fc-4282-a906-33d9230685d8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "covidcsv= pd.read_csv('C://Users/Utente/DATASET CSV/owid-covid-data.csv',dtype={'NomeColonna33':str},low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c9c1adc8-8155-4ece-88f5-750bdfa28ecc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iso_code</th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>new_cases</th>\n",
       "      <th>new_cases_smoothed</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>new_deaths</th>\n",
       "      <th>new_deaths_smoothed</th>\n",
       "      <th>...</th>\n",
       "      <th>male_smokers</th>\n",
       "      <th>handwashing_facilities</th>\n",
       "      <th>hospital_beds_per_thousand</th>\n",
       "      <th>life_expectancy</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>population</th>\n",
       "      <th>excess_mortality_cumulative_absolute</th>\n",
       "      <th>excess_mortality_cumulative</th>\n",
       "      <th>excess_mortality</th>\n",
       "      <th>excess_mortality_cumulative_per_million</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376980</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-01-31</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376981</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-01</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376982</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-02</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376983</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-03</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376984</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-04</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>376985 rows × 67 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       iso_code continent     location        date  total_cases  new_cases  \\\n",
       "0           AFG      Asia  Afghanistan  2020-01-05          NaN        0.0   \n",
       "1           AFG      Asia  Afghanistan  2020-01-06          NaN        0.0   \n",
       "2           AFG      Asia  Afghanistan  2020-01-07          NaN        0.0   \n",
       "3           AFG      Asia  Afghanistan  2020-01-08          NaN        0.0   \n",
       "4           AFG      Asia  Afghanistan  2020-01-09          NaN        0.0   \n",
       "...         ...       ...          ...         ...          ...        ...   \n",
       "376980      ZWE    Africa     Zimbabwe  2024-01-31     266265.0        0.0   \n",
       "376981      ZWE    Africa     Zimbabwe  2024-02-01     266265.0        0.0   \n",
       "376982      ZWE    Africa     Zimbabwe  2024-02-02     266265.0        0.0   \n",
       "376983      ZWE    Africa     Zimbabwe  2024-02-03     266265.0        0.0   \n",
       "376984      ZWE    Africa     Zimbabwe  2024-02-04     266265.0        0.0   \n",
       "\n",
       "        new_cases_smoothed  total_deaths  new_deaths  new_deaths_smoothed  \\\n",
       "0                      NaN           NaN         0.0                  NaN   \n",
       "1                      NaN           NaN         0.0                  NaN   \n",
       "2                      NaN           NaN         0.0                  NaN   \n",
       "3                      NaN           NaN         0.0                  NaN   \n",
       "4                      NaN           NaN         0.0                  NaN   \n",
       "...                    ...           ...         ...                  ...   \n",
       "376980               4.429        5737.0         0.0                  0.0   \n",
       "376981               4.429        5737.0         0.0                  0.0   \n",
       "376982               4.429        5737.0         0.0                  0.0   \n",
       "376983               4.429        5737.0         0.0                  0.0   \n",
       "376984               0.000        5737.0         0.0                  0.0   \n",
       "\n",
       "        ...  male_smokers  handwashing_facilities  hospital_beds_per_thousand  \\\n",
       "0       ...           NaN                  37.746                         0.5   \n",
       "1       ...           NaN                  37.746                         0.5   \n",
       "2       ...           NaN                  37.746                         0.5   \n",
       "3       ...           NaN                  37.746                         0.5   \n",
       "4       ...           NaN                  37.746                         0.5   \n",
       "...     ...           ...                     ...                         ...   \n",
       "376980  ...          30.7                  36.791                         1.7   \n",
       "376981  ...          30.7                  36.791                         1.7   \n",
       "376982  ...          30.7                  36.791                         1.7   \n",
       "376983  ...          30.7                  36.791                         1.7   \n",
       "376984  ...          30.7                  36.791                         1.7   \n",
       "\n",
       "        life_expectancy  human_development_index  population  \\\n",
       "0                 64.83                    0.511  41128772.0   \n",
       "1                 64.83                    0.511  41128772.0   \n",
       "2                 64.83                    0.511  41128772.0   \n",
       "3                 64.83                    0.511  41128772.0   \n",
       "4                 64.83                    0.511  41128772.0   \n",
       "...                 ...                      ...         ...   \n",
       "376980            61.49                    0.571  16320539.0   \n",
       "376981            61.49                    0.571  16320539.0   \n",
       "376982            61.49                    0.571  16320539.0   \n",
       "376983            61.49                    0.571  16320539.0   \n",
       "376984            61.49                    0.571  16320539.0   \n",
       "\n",
       "        excess_mortality_cumulative_absolute  excess_mortality_cumulative  \\\n",
       "0                                        NaN                          NaN   \n",
       "1                                        NaN                          NaN   \n",
       "2                                        NaN                          NaN   \n",
       "3                                        NaN                          NaN   \n",
       "4                                        NaN                          NaN   \n",
       "...                                      ...                          ...   \n",
       "376980                                   NaN                          NaN   \n",
       "376981                                   NaN                          NaN   \n",
       "376982                                   NaN                          NaN   \n",
       "376983                                   NaN                          NaN   \n",
       "376984                                   NaN                          NaN   \n",
       "\n",
       "        excess_mortality  excess_mortality_cumulative_per_million  \n",
       "0                    NaN                                      NaN  \n",
       "1                    NaN                                      NaN  \n",
       "2                    NaN                                      NaN  \n",
       "3                    NaN                                      NaN  \n",
       "4                    NaN                                      NaN  \n",
       "...                  ...                                      ...  \n",
       "376980               NaN                                      NaN  \n",
       "376981               NaN                                      NaN  \n",
       "376982               NaN                                      NaN  \n",
       "376983               NaN                                      NaN  \n",
       "376984               NaN                                      NaN  \n",
       "\n",
       "[376985 rows x 67 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covidcsv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8453d4f7-814b-4d36-b799-7758b9d14b85",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Si richiede di verificare le dimensioni del dataset e le diciture presenti nell'intestazione;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ca09eca0-00cf-4d26-a010-8a6857a89fd4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(376985, 67)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covidcsv.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa7e3efd-7b85-44a6-97b3-76adc921a1bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#altra modalità"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c8fd3960-1b05-4a7c-bd89-94771159cec8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 376985 entries, 0 to 376984\n",
      "Data columns (total 67 columns):\n",
      " #   Column                                      Non-Null Count   Dtype  \n",
      "---  ------                                      --------------   -----  \n",
      " 0   iso_code                                    376985 non-null  object \n",
      " 1   continent                                   358926 non-null  object \n",
      " 2   location                                    376985 non-null  object \n",
      " 3   date                                        376985 non-null  object \n",
      " 4   total_cases                                 338085 non-null  float64\n",
      " 5   new_cases                                   366116 non-null  float64\n",
      " 6   new_cases_smoothed                          364886 non-null  float64\n",
      " 7   total_deaths                                316113 non-null  float64\n",
      " 8   new_deaths                                  366124 non-null  float64\n",
      " 9   new_deaths_smoothed                         364894 non-null  float64\n",
      " 10  total_cases_per_million                     338085 non-null  float64\n",
      " 11  new_cases_per_million                       366116 non-null  float64\n",
      " 12  new_cases_smoothed_per_million              364886 non-null  float64\n",
      " 13  total_deaths_per_million                    316113 non-null  float64\n",
      " 14  new_deaths_per_million                      366124 non-null  float64\n",
      " 15  new_deaths_smoothed_per_million             364894 non-null  float64\n",
      " 16  reproduction_rate                           184817 non-null  float64\n",
      " 17  icu_patients                                38423 non-null   float64\n",
      " 18  icu_patients_per_million                    38423 non-null   float64\n",
      " 19  hosp_patients                               39921 non-null   float64\n",
      " 20  hosp_patients_per_million                   39921 non-null   float64\n",
      " 21  weekly_icu_admissions                       10580 non-null   float64\n",
      " 22  weekly_icu_admissions_per_million           10580 non-null   float64\n",
      " 23  weekly_hosp_admissions                      23974 non-null   float64\n",
      " 24  weekly_hosp_admissions_per_million          23974 non-null   float64\n",
      " 25  total_tests                                 79387 non-null   float64\n",
      " 26  new_tests                                   75403 non-null   float64\n",
      " 27  total_tests_per_thousand                    79387 non-null   float64\n",
      " 28  new_tests_per_thousand                      75403 non-null   float64\n",
      " 29  new_tests_smoothed                          103965 non-null  float64\n",
      " 30  new_tests_smoothed_per_thousand             103965 non-null  float64\n",
      " 31  positive_rate                               95927 non-null   float64\n",
      " 32  tests_per_case                              94348 non-null   float64\n",
      " 33  tests_units                                 106788 non-null  object \n",
      " 34  total_vaccinations                          82666 non-null   float64\n",
      " 35  people_vaccinated                           78619 non-null   float64\n",
      " 36  people_fully_vaccinated                     75474 non-null   float64\n",
      " 37  total_boosters                              50763 non-null   float64\n",
      " 38  new_vaccinations                            68465 non-null   float64\n",
      " 39  new_vaccinations_smoothed                   189136 non-null  float64\n",
      " 40  total_vaccinations_per_hundred              82666 non-null   float64\n",
      " 41  people_vaccinated_per_hundred               78619 non-null   float64\n",
      " 42  people_fully_vaccinated_per_hundred         75474 non-null   float64\n",
      " 43  total_boosters_per_hundred                  50763 non-null   float64\n",
      " 44  new_vaccinations_smoothed_per_million       189136 non-null  float64\n",
      " 45  new_people_vaccinated_smoothed              186629 non-null  float64\n",
      " 46  new_people_vaccinated_smoothed_per_hundred  186629 non-null  float64\n",
      " 47  stringency_index                            197292 non-null  float64\n",
      " 48  population_density                          320338 non-null  float64\n",
      " 49  median_age                                  297815 non-null  float64\n",
      " 50  aged_65_older                               287514 non-null  float64\n",
      " 51  aged_70_older                               294831 non-null  float64\n",
      " 52  gdp_per_capita                              291990 non-null  float64\n",
      " 53  extreme_poverty                             188219 non-null  float64\n",
      " 54  cardiovasc_death_rate                       292561 non-null  float64\n",
      " 55  diabetes_prevalence                         307607 non-null  float64\n",
      " 56  female_smokers                              219597 non-null  float64\n",
      " 57  male_smokers                                216613 non-null  float64\n",
      " 58  handwashing_facilities                      143291 non-null  float64\n",
      " 59  hospital_beds_per_thousand                  258389 non-null  float64\n",
      " 60  life_expectancy                             347051 non-null  float64\n",
      " 61  human_development_index                     283731 non-null  float64\n",
      " 62  population                                  376985 non-null  float64\n",
      " 63  excess_mortality_cumulative_absolute        13042 non-null   float64\n",
      " 64  excess_mortality_cumulative                 13042 non-null   float64\n",
      " 65  excess_mortality                            13042 non-null   float64\n",
      " 66  excess_mortality_cumulative_per_million     13042 non-null   float64\n",
      "dtypes: float64(62), object(5)\n",
      "memory usage: 192.7+ MB\n"
     ]
    }
   ],
   "source": [
    "covidcsv.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1957b13d-df52-4f2a-abb8-794eb28891e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Si chiede poi per ogni continente di trovare il numero di casi totali avvenuti in quello stesso continente; \n",
    "si chiede di non considerare eventuali locazioni che nel dataset non appartengono ad alcun continente;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3b642de8-3910-4cb2-95f7-4a4623bc8579",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "continenti= covidcsv[covidcsv['continent'].notnull()]\n",
    "casitotali =continenti.groupby('continent')['new_cases'].sum()\n",
    "DFcasitotali= pd.DataFrame(casitotali)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8c447336-0ea1-43ee-a561-d6d8db9906b3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>13136517.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>301391174.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>252013370.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>124526003.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>14741735.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>68752780.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 new_cases\n",
       "continent                 \n",
       "Africa          13136517.0\n",
       "Asia           301391174.0\n",
       "Europe         252013370.0\n",
       "North America  124526003.0\n",
       "Oceania         14741735.0\n",
       "South America   68752780.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DFcasitotali"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fdb6e775-8b20-4df3-8443-5439c60642ec",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Somma dei casi totali:  3282553220.0\n"
     ]
    }
   ],
   "source": [
    "sommacasitotali= (covidcsv['new_cases'].sum())\n",
    "print('Somma dei casi totali: ',sommacasitotali)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35c82d26-ad4e-43e8-8b99-a55c921fd138",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Sempre riguardo i casi di COVID totali, si chiede di sviluppare una funzione che prenda in input il dataset e due nomi di continenti,\n",
    "e che ne confronti i seguenti relativi descrittori statistici: valori minimo e massimo, media, e percentuale rispetto al numero dei casi totali \n",
    "nel mondo (calcolati anche sulle locazioni senza indicazione di continente);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f5bc4b97-c560-48ee-bcec-caec878054a6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Europa= covidcsv[covidcsv.continent=='Europe']\n",
    "Africa= covidcsv[covidcsv.continent=='Africa']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a2c6a74-4c14-4f33-8349-1615a69f38f8",
   "metadata": {},
   "source": [
    "* Descittori statistici"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c0b1304e-4c1f-441b-ad85-e4c6090d7e3b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Descrittori per tutti i continenti:\n",
      "min     0.000000e+00\n",
      "max     4.423623e+07\n",
      "mean    8.965883e+03\n",
      "Name: new_cases, dtype: float64\n",
      "\n",
      "Descrittori per il continente Europa:\n",
      "min     0.000000e+00\n",
      "max     2.417043e+06\n",
      "mean    3.339960e+03\n",
      "Name: new_cases, dtype: float64\n",
      "\n",
      "Descrittori per il continente Africa:\n",
      "min          0.000000\n",
      "max     162987.000000\n",
      "mean       154.480015\n",
      "Name: new_cases, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "descritt_tot=covidcsv['new_cases'].describe()[['min', 'max','mean']]\n",
    "print(\"\\nDescrittori per tutti i continenti:\")\n",
    "print(descritt_tot)\n",
    "descritt_Europa= Europa['new_cases'].describe()[['min', 'max','mean']]\n",
    "print(\"\\nDescrittori per il continente Europa:\")\n",
    "print(descritt_Europa)\n",
    "descritt_Africa=Africa['new_cases'].describe()[['min', 'max','mean']]\n",
    "print(\"\\nDescrittori per il continente Africa:\")\n",
    "print(descritt_Africa)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdbea284-11af-4621-8b64-9b79353018cc",
   "metadata": {},
   "source": [
    "* Calcolo percentuali"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "bb9c967b-a38b-4600-b6e9-23fb89152b92",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentuale del continente Europa rispetto al numero dei casi totali nel mondo è: \n",
      "7.68%\n",
      "Percentuale del continente Africa rispetto al numero dei casi totali nel mondo è: \n",
      " 0.40%\n",
      "Percentuale rispetto al totale dei continenti è: \n",
      "Africa: 0.40%\n",
      "Asia: 9.18%\n",
      "Europe: 7.68%\n",
      "North America: 3.79%\n",
      "Oceania: 0.45%\n",
      "South America: 2.09%\n"
     ]
    }
   ],
   "source": [
    "perc_Europa= Europa['new_cases'].sum()/sommacasitotali*100\n",
    "print('Percentuale del continente Europa rispetto al numero dei casi totali nel mondo è: ')\n",
    "print(f'{perc_Europa:.2f}%')\n",
    "perc_Africa= Africa['new_cases'].sum()/sommacasitotali*100\n",
    "print('Percentuale del continente Africa rispetto al numero dei casi totali nel mondo è: ')\n",
    "print(f' {perc_Africa:.2f}%')\n",
    "perc_casi_tot_continente = covidcsv.groupby('continent')['new_cases'].sum()/sommacasitotali * 100\n",
    "print('Percentuale rispetto al totale dei continenti è: ')\n",
    "for continent, percentuale in perc_casi_tot_continente.items():\n",
    "    print(f'{continent}: {percentuale:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "80f89b6b-02ce-44a6-ba33-aab90f687183",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "DF_perc_casi_tot= pd.DataFrame (perc_casi_tot_continente)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5e0f8fc2-2ba6-4e18-9759-7515b6c738a8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>0.400192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>9.181608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>7.677358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>3.793571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>0.449094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>2.094491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               new_cases\n",
       "continent               \n",
       "Africa          0.400192\n",
       "Asia            9.181608\n",
       "Europe          7.677358\n",
       "North America   3.793571\n",
       "Oceania         0.449094\n",
       "South America   2.094491"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DF_perc_casi_tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c54bb994-8106-4bff-8f84-adc3bc66be11",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ad48a7af-345c-4d61-97a0-cb9126d5672d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Percentuale casi covid nel mondo')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "DF_perc_casi_tot.plot(kind='bar', figsize=(6,3),\n",
    "                     linewidth=2.0)\n",
    "plt.legend(['casi covid'])\n",
    "\n",
    "plt.title('Percentuale casi covid nel mondo')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "38adb40d-6609-402f-acac-1a190122224a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def confronto(covidcsv,Europa,Africa):\n",
    "    Europa= covidcsv[covidcsv.continent=='Europe']\n",
    "    Africa= covidcsv[covidcsv.continent=='Africa']\n",
    "    descritt_tot=covidcsv['new_cases'].describe()[['min', 'max','mean']]\n",
    "    descritt_Europa= Europa['new_cases'].describe()[['min', 'max','mean']]\n",
    "    descritt_Africa=Africa['new_cases'].describe()[['min', 'max','mean']]\n",
    "    return descritt_tot, descritt_Europa, descritt_Africa\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dea8cd13-5d2e-4bf0-845e-29ca6505ec3b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Tot_continenti</th>\n",
       "      <td>0.0</td>\n",
       "      <td>44236227.0</td>\n",
       "      <td>8965.882999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2417043.0</td>\n",
       "      <td>3339.960373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europa</th>\n",
       "      <td>0.0</td>\n",
       "      <td>162987.0</td>\n",
       "      <td>154.480015</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                min         max         mean\n",
       "Tot_continenti  0.0  44236227.0  8965.882999\n",
       "Africa          0.0   2417043.0  3339.960373\n",
       "Europa          0.0    162987.0   154.480015"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "risultati = confronto(covidcsv,Europa,Africa)\n",
    "DFrisultati=pd.DataFrame(risultati,index=['Tot_continenti','Africa','Europa'])\n",
    "DFrisultati"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e34c1e5-4a86-44c9-9900-4fcac1a409ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Si chiede poi di effettuare lo stesso tipo di analisi – \n",
    "anche in questo caso sviluppando una funzione ad hoc – per il numero di vaccinazioni totali per ogni continente;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2de95eeb-4548-46c8-b9e9-3a9df9ed7a5c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La somma dei vaccini totali per continente è: \n",
      "continent\n",
      "Africa           5.081307e+10\n",
      "Asia             4.323161e+12\n",
      "Europe           7.251537e+11\n",
      "North America    5.709678e+11\n",
      "Oceania          2.599179e+10\n",
      "South America    4.271463e+11\n",
      "Name: total_vaccinations, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "vaccini_per_continente= covidcsv.groupby('continent')['total_vaccinations'].sum()\n",
    "print('La somma dei vaccini totali per continente è: ')\n",
    "print(vaccini_per_continente)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "37a64df0-bea5-43ae-9beb-4aea571d04ed",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I descrittori delle vaccinazioni per continente sono: \n",
      "               min           max          mean\n",
      "continent                                     \n",
      "Africa         0.0  1.330480e+08  8.012152e+06\n",
      "Asia           0.0  3.491077e+09  2.307285e+08\n",
      "Europe         0.0  1.922215e+08  2.727577e+07\n",
      "North America  0.0  6.767288e+08  6.472090e+07\n",
      "Oceania        0.0  6.930634e+07  1.261737e+07\n",
      "South America  0.0  4.864364e+08  6.595835e+07\n"
     ]
    }
   ],
   "source": [
    "descrittori_vaccini = covidcsv.groupby('continent')['total_vaccinations'].describe()[['min', 'max','mean']]\n",
    "print('I descrittori delle vaccinazioni per continente sono: ')\n",
    "print(descrittori_vaccini)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a98f3504-37e0-4ab8-b6c4-d36af0da13cb",
   "metadata": {},
   "source": [
    "* Percentuali"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "97c8adb2-184e-4c5f-9227-7e3f63cb35f6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40674465662916.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vaccini_totali= covidcsv['total_vaccinations'].sum()\n",
    "vaccini_totali"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "71f82b8a-7f22-4474-b91b-7c8483b1ad40",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La percentuale per continente sul totale dei vaccini è:\n",
      "Africa: 0.12%\n",
      "Asia: 10.63%\n",
      "Europe: 1.78%\n",
      "North America: 1.40%\n",
      "Oceania: 0.06%\n",
      "South America: 1.05%\n"
     ]
    }
   ],
   "source": [
    "perc_cont_sul_tot=covidcsv.groupby('continent')['total_vaccinations'].sum()/vaccini_totali * 100\n",
    "print('La percentuale per continente sul totale dei vaccini è:')\n",
    "for continent, percentuale in perc_cont_sul_tot.items():\n",
    "    print(f'{continent}: {percentuale:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "193ea173-6c4e-434f-8c87-91a7ab423d5b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Percentuale vaccinazioni nel mondo')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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qlUxceJEjS9/IiIikobWCwArKyu4ublptFlYWMDe3j5LOxEREUmDIwESERHJUIFcBfCuY8eOfYrVEBER0QfiEQAiIiIZYgFAREQkQywAiIiIZIgFABERkQyxACAiIpIhFgBEREQyxAKAiIhIhlgAEBERyRALACIiIhliAUBERCRDLACIiIhkiAUAERGRDLEAICIikiEWAERERDLEAoCIiEiGWAAQERHJEAsAIiIiGWIBQEREJEMsAIiIiGSIBQAREZEMsQAgIiKSIRYAREREMsQCgIiISIZYABAREckQCwAiIiIZYgFAREQkQywAiIiIZIgFABERkQyxACAiIpIhFgBEREQypPUCYN68eahTpw6srKzg4OCAzp074+bNm9peDREREX0ErRcAx48fx/Dhw3H27FkcOnQI6enpaNOmDZKSkrS9KiIiIsonI20vcP/+/RrPAwIC4ODggAsXLqBJkybaXh0RERHlg9YLgHfFx8cDAIoUKZLt9JSUFKSkpKifJyQkFHQkIiIi2SvQToBCCHz33Xdo1KgR3Nzcsp1n3rx5sLGxUT8cHR0LMhIRERGhgAuAESNG4PLlywgKCspxnsmTJyM+Pl79ePDgQUFGIiIiIhTgKYCRI0di586dOHHiBMqUKZPjfEqlEkqlsqBiEBERUTa0XgAIITBy5Ehs27YNx44dg7Ozs7ZXQURERB9J6wXA8OHDsWHDBuzYsQNWVlaIjY0FANjY2MDMzEzbqyMiIqJ80HoBsHz5cgBAs2bNNNoDAgLQv39/ba+OSKc4TdojdYQc3ZvvJXUEItIhBXIKgIiIiHQb7wVAREQkQywAiIiIZIgFABERkQyxACAiIpIhFgBEREQyxAKAiIhIhgr8boBERLnh2AlE0uARACIiIhliAUBERCRDLACIiIhkiAUAERGRDLEAICIikiEWAERERDLEywCJiEgWeMmpJh4BICIikiEWAERERDLEAoCIiEiGWAAQERHJEAsAIiIiGWIBQEREJEMsAIiIiGSIBQAREZEMsQAgIiKSIRYAREREMsQCgIiISIZYABAREckQCwAiIiIZYgFAREQkQywAiIiIZIgFABERkQyxACAiIpKhAisAli1bBmdnZ5iamqJ27do4efJkQa2KiIiI8sioIBa6adMmjBkzBsuWLUPDhg3x+++/o127doiIiEDZsmULYpW5cpq055Ov80Pdm+8ldQQiIpKhAikA/Pz8MGjQIHz99dcAgCVLluDAgQNYvnw55s2bVxCrJCKSFf6woY+l9QIgNTUVFy5cwKRJkzTa27Rpg9OnT2eZPyUlBSkpKern8fHxAICEhAStZVKlJGttWdqmzb9Tm7jN8ofbLe+4zfKH2y3v5LDNMpcjhHj/zELLHj16JACIkJAQjfY5c+aIypUrZ5l/+vTpAgAffPDBBx988KGlx4MHD977fV0gpwAAQKFQaDwXQmRpA4DJkyfju+++Uz9XqVR4/vw57O3ts51fSgkJCXB0dMSDBw9gbW0tdRy9we2Wd9xm+cPtlnfcZvmjq9tNCIFXr16hVKlS751X6wVA0aJFYWhoiNjYWI32uLg4FC9ePMv8SqUSSqVSo83W1lbbsbTK2tpap95wfcHtlnfcZvnD7ZZ33Gb5o4vbzcbG5oPm0/plgCYmJqhduzYOHTqk0X7o0CE0aNBA26sjIiKifCiQUwDfffcd+vTpA09PT3z22WdYuXIloqOjMXTo0IJYHREREeVRgRQA3bt3x7NnzzBr1izExMTAzc0Ne/fuRbly5QpidZ+MUqnE9OnTs5yyoNxxu+Udt1n+cLvlHbdZ/hSG7aYQ4kOuFSAiIqLChPcCICIikiEWAERERDLEAoCIiEiGWAAQERHJEAsAIiIiGSqwoYCJiD6ViIgIREdHIzU1VaO9Y8eOEiWiwig0NBRbtmzJdl8LDg6WKFX+sQB4j4cPH2Lnzp3ZvuF+fn4SpdJ9f/31FzZv3pztdrt48aJEqfRHamoqoqKiUKFCBRgZ8Z9pTu7evYsuXbrgypUrUCgU6jugZd5HJCMjQ8p4Oo2fbXmzceNG9O3bF23atMGhQ4fQpk0b3L59G7GxsejSpYvU8fJHG3cALKz+/vtvYW5uLqpVqyaMjIyEh4eHsLW1FTY2NqJ58+ZSx9NZv/zyi7C0tBTDhw8XJiYmYsiQIaJVq1bCxsZGfP/991LH02lJSUli4MCBwtDQUBgaGorIyEghhBAjR44U8+bNkzid7vH29hadOnUScXFxwtLSUkRERIiTJ0+KunXrihMnTkgdT2fxsy3v3N3dxdKlS4UQQlhaWorIyEihUqnEN998I3744QeJ0+UPC4Bc1KlTR0ybNk0I8f9v+KtXr0THjh3FsmXLJE6nu6pUqSI2bNgghPj/7SaEENOmTRPDhw+XMprOGzVqlKhdu7Y4efKksLCwUG+7HTt2CA8PD4nT6R57e3sRHh4uhBDC2tpa3LhxQwghxOHDh7m9csHPtrwzNzcXUVFRQoi3+93ly5eFEEJERESIEiVKSJgs/9gJMBfXr19Hv379AABGRkZ4/fo1LC0tMWvWLCxYsEDidLorOjpafeMnMzMzvHr1CgDQp08fBAUFSRlN523fvh1Lly5Fo0aNNG6H7erqisjISAmT6aaMjAxYWloCeHsn0sePHwMAypUrh5s3b0oZTafxsy3vihQpov4sK126NK5evQoAePnyJZKTk6WMlm8sAHJhYWGBlJQUAECpUqU0PoCfPn0qVSydV6JECTx79gzA2w/is2fPAgCioqLU52gpe0+ePIGDg0OW9qSkJI2CgN5yc3PD5cuXAQD16tXDwoULERISglmzZqF8+fISp9Nd/GzLu8aNG6vvcvvVV19h9OjR+Oabb9CzZ0+0bNlS4nT5w95Fuahfvz5CQkLg6uoKLy8vjB07FleuXEFwcDDq168vdTyd1aJFC+zatQu1atXCoEGD4Ovri7/++gthYWHo2rWr1PF0Wp06dbBnzx6MHDkSwP93Zlu1ahU+++wzKaPppKlTpyIpKQkA8OOPP8Lb2xuNGzeGvb09Nm3aJHE63cXPtrxbunQp3rx5AwCYPHkyjI2NcerUKXTt2hXTpk2TOF3+8GZAubh79y4SExNRvXp1JCcnY9y4cTh16hQqVqyIxYsX6/3dDQuKSqWCSqVS917fvHmzersNHToUJiYmEifUXadPn0bbtm3h4+ODwMBADBkyBNeuXcOZM2dw/Phx1K5dW+qIOu/58+ews7PjEZNc8LONABYARDrnypUrWLRoES5cuACVSoVatWph4sSJcHd3lzqazomPj0dGRgaKFCmi0f78+XMYGRnB2tpaomRU2OzduxeGhob4/PPPNdoPHjyIjIwMtGvXTqJk+ccCIBehoaFQqVSoV6+eRvu5c+dgaGgIT09PiZLpnsuXL8PNzQ0GBgbqc7I5qV69+idKRYVdu3bt0KFDBwwbNkyjfcWKFdi5cyf27t0rUTIqbKpXr4758+ejffv2Gu379+/HxIkTER4eLlGy/GMBkIu6detiwoQJ+OKLLzTag4ODsWDBApw7d06iZLrHwMAAsbGxcHBwgIGBgcagLP+lUCg4OMt7ZGRkYNu2bbh+/ToUCgVcXFzQqVMnDgiUjSJFiiAkJAQuLi4a7Tdu3EDDhg3VnVHp7ba6desWihYt+t5TJM+fP/+EyfSDmZkZrl+/DicnJ432e/fuoVq1auq+KPqEnyi5iIiIQK1atbK016xZExERERIk0l1RUVEoVqyY+v8pf65evYpOnTohNjYWVapUAQDcunULxYoVw86dO3ka4B0pKSlIT0/P0p6WlobXr19LkEh3LV68GFZWVgCAJUuWSBtGD9nY2ODu3btZCoA7d+7AwsJCmlAfiUcAcmFvb4/du3dn6X19+vRpeHl54cWLFxIlo8Kqfv36cHBwwJo1a2BnZwcAePHiBfr374+4uDicOXNG4oS6pVmzZnB3d8dvv/2m0T58+HBcvnwZJ0+elCgZFTaDBw/G2bNnsW3bNlSoUAHA2y//bt26oU6dOvjjjz8kTph3LABy0aNHD8TGxmLHjh2wsbEB8HbQh86dO8PBwQGbN2+WOKFuWrNmDYoWLQovLy8AwIQJE7By5Uq4uroiKCiIPYxzYWZmhrCwMFSrVk2j/erVq6hTpw5/1b4jJCQErVq1Qp06ddTXYh8+fBihoaE4ePAgGjduLHFC3aVSqXDnzh3ExcVBpVJpTGvSpIlEqXRXfHw82rZti7CwMJQpUwbA2/spNG7cGMHBwbC1tZU2YD6wAMjFo0eP0KRJEzx79gw1a9YEAFy6dAnFixfHoUOH4OjoKHFC3VSlShUsX74cLVq0wJkzZ9CyZUssWbIEu3fvhpGRkV7eNetT8fDwgJ+fH1q0aKHRfuTIEYwePRpXrlyRKJnuunTpEn766SdcunQJZmZmqF69OiZPnoxKlSpJHU1nnT17Fr169cL9+/ez9NVhP52cCSFw6NAhhIeHq/c1fS6WWAC8R1JSEtavX6/xhvfs2RPGxsZSR9NZ5ubmuHHjBsqWLYuJEyciJiYGa9euxbVr19CsWTM8efJE6og6a+/evZgwYQJmzJihHpDl7NmzmDVrFubPn49GjRqp5+UlbpRfHh4eqFy5MmbOnImSJUtm6RCYecSTCjcWAKR1Dg4OOHDgAGrWrImaNWvC19cXffv2RWRkJGrUqIHExESpI+osA4P/H50780NZvHOLWyGErH+lJSQkqIufhISEXOdlkZQ9CwsLhIeHo2LFilJH0Wm//vorBg8eDFNTU/z666+5zjtq1KhPlEp7eBXAO3bu3Il27drB2NgYO3fuzHXejh07fqJU+qV169b4+uuvUbNmTdy6dUvdF+DatWs8//8eR48elTqCzrOzs0NMTAwcHBxga2ub7eVsci+S3qdevXq4c+cOC4D3WLx4MXx8fGBqaorFixfnOJ9CodDLAoBHAN7x7vXsOeGHS85evnyJqVOn4sGDB/j222/Rtm1bAMD06dNhbGyMqVOnSpyQ9Nnx48fRsGFDGBkZ4fjx47nO27Rp00+USr9s27YNU6dOxfjx4+Hu7p7llCYH65IHFgBU4OLj47F+/Xr88ccfCA8PZ+H0Hi9fvoS/v796ICBXV1cMHDiQ52XfkZ6ejjlz5mDgwIHskJtH2f24yRy8iz9uskpLS0OVKlWwe/duuLq6Sh1Ha3g74BykpaWhefPmuHXrltRR9NaRI0fQu3dvlCxZEr/99hvat2+PsLAwqWPptLCwMFSoUAGLFy/G8+fP8fTpU/j5+aFChQq4ePGi1PF0ipGRERYtWsQvq3yIiorK8rh79676v6TJ2NgYKSkphe4GUzwCkItixYrh9OnTvJwoDx4+fIjAwECsXr0aSUlJ+Oqrr7BixQqEh4cXqsq5oDRu3BgVK1bEqlWr1EP/pqen4+uvv8bdu3dx4sQJiRPqls6dO6Nz587o37+/1FGokJs/fz5u3LiBP/74o9AMy80CIBdjx46FsbEx5s+fL3UUvdC+fXucOnUK3t7e8PHxQdu2bWFoaAhjY2MWAB/IzMwM//zzD6pWrarRHhERAU9PTyQnJ0uUTDf9/vvvmDFjBnx8fFC7du0sQ7Kyo27uIiIiEB0djdTUVI12bresunTpgsOHD8PS0hLu7u5Z9jV9HN+kcJQxBSQ1NRV//PEHDh06BE9PzyxvuJ+fn0TJdNPBgwcxatQofPvttzxqkk/W1taIjo7OUgA8ePBAPY47/b9vv/0WQPb/FnkuO2d3795Fly5dcOXKFY0bd2Ue4uZ2y8rW1hbdunWTOoZWsQDIxdWrV9U3A3q3L0BhOxekDSdPnsTq1avh6emJqlWrok+fPujevbvUsfRK9+7dMWjQICxatAgNGjSAQqHAqVOnMH78ePTs2VPqeDrn3SFs6cOMHj0azs7O+Pvvv1G+fHmcP38ez549w9ixY7Fo0SKp4+mkgIAAqSNonyAN4eHhIiMjQ+oYei0pKUn4+/uLhg0bCmNjY2FgYCCWLFkiEhISpI6m81JSUsSoUaOEiYmJMDAwEAYGBkKpVIoxY8aIN2/eSB1Pp71+/VrqCHrD3t5ehIeHCyGEsLa2Fjdu3BBCCHH48GHh4eEhZTSdlpaWJg4dOiRWrFih/jx79OiRePXqlcTJ8ocFwDsMDAzEv//+K4QQwtnZWTx9+lTiRPrtxo0bYvz48aJEiRLC1NRUdOjQQepIOis9PV0cO3ZMPHv2TCQlJYnLly+L8PBwkZSUJHU0nZWeni5mzZolSpUqJQwNDUVkZKQQQoipU6eKP/74Q+J0usvW1la9rcqXLy+OHDkihBDizp07wszMTMpoOuvevXuiatWqwtzcXGNfGz16tBgyZIjE6fKHlwG+w9bWVn0/+3v37vEQ40eqUqUKFi5ciIcPHyIoKEjqODrN0NAQn3/+OeLj42Fubg53d3dUr14d5ubmUkfTWXPmzEFgYCAWLlwIExMTdbu7u7te3p71U3Fzc8Ply5cBvB0VcOHChQgJCcGsWbNQvnx5idPpptGjR8PT0xMvXryAmZmZuj2zc6A+Yh+Ad3Tr1g1NmzZV3yDD09MThoaG2c7L62U/nKGhofqSLcqZu7s77t69C2dnZ6mj6IW1a9di5cqVaNmyJYYOHapur169Om7cuCFhMt02depUJCUlAQB+/PFHeHt7o3HjxrC3t8emTZskTqebTp06hZCQEI1CEwDKlSuHR48eSZTq47AAeMfKlSvRtWtX3LlzB6NGjcI333yTbe9rwasnqQDMmTMH48aNw+zZs7O9rI03t9H06NGjbMezV6lUSEtLkyCRfvj888/V/1++fHlERETg+fPnsLOzYwfnHKhUqmyvjnj48KHeXqHDAiAbmWPXX7hwAaNHj1a/ue8OaTtmzBgJU1JhlLnvdezYUeODWHCI1mxVq1YNJ0+ezHKTqS1btqBmzZoSpdIfd+7cQWRkJJo0aYIiRYrwh00uWrdujSVLlmDlypUA3l4JlpiYiOnTp6N9+/YSp8sfFgC5yLzs48iRI1i9ejWCg4NRrlw5dOvWDf7+/hKno8KIdwPMm+nTp6NPnz549OgRVCoVgoODcfPmTaxduxa7d++WOp7OevbsGb766iscPXoUCoUCt2/fRvny5fH111/D1tYWP//8s9QRdc7ixYvRvHlzuLq64s2bN+jVqxdu376NokWL6m3/Jo4EmAMOaUukHw4cOIC5c+fiwoULUKlUqFWrFn744Qe0adNG6mg6q2/fvoiLi8Mff/wBFxcXhIeHo3z58jh48CB8fX1x7do1qSPqpNevXyMoKAgXL15U72s+Pj4anQL1CQuAbGQOaevl5YXevXtzSFv6ZN431n+TJk0+URIqzEqUKIEDBw6gRo0asLKyUhcAUVFRcHd3R2JiotQR6RPgKYBscEhbkkqzZs2ytP23LwD7AOQsMTExy2W77DSZvaSkpGwvL3369CmUSqUEifTDo0ePEBISgri4uCz72qhRoyRKlX8sALLBIW1JKi9evNB4npaWhn/++QfTpk3DnDlzJEqlu6KiojBixAgcO3YMb968Ubez02TumjRpgrVr12L27NkA3haZKpUKP/30E5o3by5xOt0UEBCAoUOHwsTEBPb29hqFuUKh0MsCgKcAcpGcnIyNGzdi9erVOH/+PDIyMuDn54eBAwfq7WUfpJ9OnDgBX19fXLhwQeooOqVBgwYA3g7SUrx48SyXsDVt2lSKWDovIiICzZo1Q+3atXHkyBF07NgR165dw/PnzxESEoIKFSpIHVHnODo6YujQoZg8eTIMDArHGHosAD7QzZs34e/vj3Xr1uHly5do3bo1du7cKXUskonr16+jTp06PDf7DktLS1y4cAFVqlSROoreiY2NxfLlyzU6Tw4fPhwlS5aUOppOsre3x/nz5wtVccQCII8yMjKwa9curF69mgUAaV3m8KyZhBCIiYnB/PnzkZaWhpCQEImS6abmzZtjypQpaNWqldRRqJCbMGECihQpgkmTJkkdRWtYABDpEAMDA437s2eqX78+Vq9ejapVq0qUTDdFRkZi6NCh6N27N9zc3GBsbKwxvXr16hIl020BAQGwtLTEl19+qdG+ZcsWJCcno1+/fhIl010ZGRnw9vbG69ev4e7unmVf8/PzkyhZ/rETIJEOybwRVSYDAwMUK1YMpqamEiXSbU+ePEFkZCQGDBigbsssoNgJMGfz58/HihUrsrQ7ODhg8ODBLACyMXfuXBw4cEB9uundToD6iEcAiHRA+/btERQUBBsbGwBv7wkwfPhw2NraAng7clvjxo0REREhYUrd4+rqChcXF0yYMCHbToDvDhFMb5mamuLGjRtwcnLSaL937x5cXFzw+vVraYLpMDs7OyxevBj9+/eXOorW8AgA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",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "perc_cont_sul_tot.plot(kind='bar', figsize=(6,3),\n",
    "                     linewidth=2.0)\n",
    "plt.legend([' vaccinazioni'])\n",
    "\n",
    "plt.title('Percentuale vaccinazioni nel mondo')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f2e719e7-644d-4ef5-bca1-04bcd921e109",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def confrontovaccini (covidcsv):\n",
    "    vaccini_totali = covidcsv['total_vaccinations'].sum()\n",
    "    vaccini_per_continente = covidcsv.groupby('continent')['total_vaccinations'].sum()\n",
    "    descrittori_vaccini = covidcsv.groupby('continent')['total_vaccinations'].describe()[['min', 'max','mean']]\n",
    "    return vaccini_totali,vaccini_per_continente,descrittori_vaccini\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f3a304c8-13e1-4fe4-b6fa-921835f25c14",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "risultatovacc = confrontovaccini(covidcsv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e1969091-4b04-4021-b4ed-04a86009c6b2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40674465662916.0,\n",
       " continent\n",
       " Africa           5.081307e+10\n",
       " Asia             4.323161e+12\n",
       " Europe           7.251537e+11\n",
       " North America    5.709678e+11\n",
       " Oceania          2.599179e+10\n",
       " South America    4.271463e+11\n",
       " Name: total_vaccinations, dtype: float64,\n",
       "                min           max          mean\n",
       " continent                                     \n",
       " Africa         0.0  1.330480e+08  8.012152e+06\n",
       " Asia           0.0  3.491077e+09  2.307285e+08\n",
       " Europe         0.0  1.922215e+08  2.727577e+07\n",
       " North America  0.0  6.767288e+08  6.472090e+07\n",
       " Oceania        0.0  6.930634e+07  1.261737e+07\n",
       " South America  0.0  4.864364e+08  6.595835e+07)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "risultatovacc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d5de96f-e67e-4532-bb95-d00c4314547a",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Alla fine, basandosi sui calcoli fatti, il committente chiede di stilare un breve,tre o quattro righe,\n",
    "paragrafo testuale riassuntivo sulle statistiche di casi e vaccinazioni, che si concentri solo sulle differenze esistenti tra Europa, \n",
    "Sud America e Oceania."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa3c626b-c4e0-4921-a80f-dfed553cf089",
   "metadata": {},
   "outputs": [],
   "source": [
    "''' L'Europa, rispetto a Sud America e Oceania, è il continente che presenta la più alta concentrazione di casi covid, ovvero 252013370.\n",
    "Il Sud America segue con 68752780 casi ed infine l'Oceania con 14641735. \n",
    "Per quanto concerne le vaccinazioni, il continente europeo è nuovamente in testa: avendo affrontato un elevato numero di casi ha anche\n",
    "investito significativamente nelle vaccinazioni; seguono Sud America e Oceania. Quest'ultimo, con la più bassa concentrazione rispetto agli altri \n",
    "continenti, sembra gestire la situazione con un approccio bilanciato tra la gestione dei casi e l'implementazione delle vaccinazioni."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
